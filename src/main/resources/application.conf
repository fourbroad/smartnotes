akka {
#  loggers = ["akka.event.slf4j.Slf4jLogger"]
#  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
#  logger-startup-timeout = 30s
  loglevel = "DEBUG"
  stdout-loglevel = "DEBUG"
  
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
    }
  }

  cluster {
    seed-nodes = ["akka.tcp://SmartNotes@127.0.0.1:2551"]
    roles = ["nameService"]
    auto-down-unreachable-after = 10s
    metrics.enabled = off
    distributed-data.durable{
      keys = ["*"]
      lmdb.dir = "ddata"
    }
  }

  init-dispatcher {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher
    
    # What kind of ExecutionService to use
    executor = "fork-join-executor"
    
    # Configuration for the fork join pool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 2
      
      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 2.0
      
      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 10
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 100
  }
  
  extensions = [akka.persistence.Persistence]
  
  persistence {
    journal {
      plugin = "akka.persistence.journal.leveldb"
      leveldb.native = false
      leveldb.dir = "target/journal"
      
      auto-start-journals = ["akka.persistence.journal.leveldb"]
    }

    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
      auto-start-snapshot-stores = ["akka.persistence.snapshot-store.local"]
      local.dir = "target/snapshots"
    }
 
    elasticsearch-snapshot-store {
      class = "com.zxtx.persistence.ElasticSearchSnapshotStore"
      plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
    }
       
    elasticsearch.journal{
        class = "com.zxtx.persistence.ElasticSearchJournal"
        event-adapters {
          event = "com.zxtx.actors.DocumentEventAdapter"
        }
        event-adapter-bindings {
          "com.zxtx.actors.DocumentActor$DocumentCreated" = event
          "com.zxtx.actors.DocumentActor$DocumentReplaced" = event
          "com.zxtx.actors.DocumentActor$DocumentPatched" = event
          "com.zxtx.actors.DocumentActor$DocumentRemoved" = event
          "com.zxtx.actors.CollectionActor$CollectionCreated" = event
          "com.zxtx.actors.CollectionActor$CollectionReplaced" = event
          "com.zxtx.actors.CollectionActor$CollectionPatched" = event
          "com.zxtx.actors.CollectionActor$CollectionRemoved" = event
          "com.zxtx.actors.ViewActor$ViewCreated" = event
          "com.zxtx.actors.ViewActor$ViewReplaced" = event
          "com.zxtx.actors.ViewActor$ViewPatched" = event
          "com.zxtx.actors.ViewActor$ViewRemoved" = event
          "com.zxtx.actors.DomainActor$DomainCreated" = event
          "com.zxtx.actors.DomainActor$DomainReplaced" = event
          "com.zxtx.actors.DomainActor$DomainPatched" = event
          "com.zxtx.actors.DomainActor$DomainRemoved" = event
          "com.zxtx.actors.DomainActor$DomainJoined" = event
          "com.zxtx.actors.DomainActor$DomainQuited" = event
          "com.zxtx.actors.UserActor$UserCreated" = event
          "com.zxtx.actors.UserActor$UserReplaced" = event
          "com.zxtx.actors.UserActor$UserPatched" = event
          "com.zxtx.actors.UserActor$UserRemoved" = event
          "com.zxtx.actors.UserActor$PasswordReset" = event
          "com.zxtx.actors.ACL$ACLReplaced" = event
          "com.zxtx.actors.ACL$ACLPatched" = event
          "com.zxtx.actors.ACL$EventACLPatched" = event
          "com.zxtx.actors.ACL$PermissionSubjectRemoved" = event
          "com.zxtx.actors.ACL$EventPermissionSubjectRemoved" = event
          "spray.json.JsValue" = event
        }
    }
    
    query.journal.elasticsearch {
        # Implementation class of the ElasticSearch ReadJournalProvider
        class = "com.zxtx.persistence.ElasticSearchReadJournalProvider"
        
        # Absolute path to the write journal plugin configuration entry that this
        # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
        # If undefined (or "") it will connect to the default journal as specified by the
        # akka.persistence.journal.plugin property.
        write-plugin = "akka.persistence.elasticsearch.journal"
        
        # How many events to fetch in one query (replay) and keep buffered until they
        # are delivered downstreams.
        max-buffer-size = 100
    }
  }
}

domain {
  root-domain = "localhost"
  
  administrator {
      name = "administrator"
      password = "!QAZ)OKM"
  }
}

name_service {
  # waiting for name to be registered.
  timeout = 10s
}